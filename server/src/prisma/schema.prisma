datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  username      String?      @unique
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  clubs         ClubMember[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Club {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  members   ClubMember[]
  books     Book[]
  adminId   String
}

model ClubMember {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String
  user    User   @relation(fields: [userId], references: [id])
  clubId  String
  club    Club   @relation(fields: [clubId], references: [id])
  adminId String
  haveRead  Boolean
}

model Book {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  author    String?
  whoChose  String?
  whoRead   String[]
  clubId    String
  club      Club     @relation(fields: [clubId], references: [id])
}
